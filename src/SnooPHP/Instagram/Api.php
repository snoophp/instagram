<?php

namespace SnooPHP\Instagram;

use SnooPHP\Http\Curl\Get;

/**
 * Perform raw api requests or use dedicated methods
 * 
 * Requests can be saved in a dedicated cache
 * 
 * @author Sneppy
 */
class Api
{
	/**
	 * @var string $clientId application client id
	 */
	protected $clientId;

	/**
	 * @var string $secretId application secret id
	 */
	protected $secretId;

	/**
	 * @var string $token user access token, used for api requests
	 * 
	 * Access token can either be generated by the auth flow, or injected manually
	 */
	protected $token;

	/**
	 * @var string $version api version (default: v1)
	 */
	protected $version = "v1";

	/**
	 * @var string $cacheClass cache class
	 */
	protected $cacheClass = "SnooPHP\Instagram\NullCache";

	/**
	 * @const ENDPOINT instagram api endpoint
	 */
	const ENDPOINT = "https://api.instagram.com";

	/**
	 * Perform a generic query
	 * 
	 * @param string $query query string (with parameters)
	 * 
	 * @return object|bool false if fails
	 */
	public function query($query)
	{
		// If no access token, abort
		if (empty($this->token)) return false;

		// Check if cached result exists
		if ($record = $this->cacheClass::fetch($query, $this->token)) return $record;

		// Make api request
		$curl = new Get(static::ENDPOINT."/{$this->version}/{$query}".(strpos($query, '?') !== false ? '&' : '?')."access_token={$this->token}");
		if ($curl && $curl->success())
		{
			// Save record in cache and return it
			$raw = $curl->content();
			return $this->cacheClass::store($query, $this->token, $raw);
		}
		else
			return false;
	}

	/**
	 * Create a new instance from existing access token
	 * 
	 * @param string $token provided access token
	 * 
	 * @return Api
	 */
	public static function byToken($token)
	{
		$api = new static();
		$api->token = $token;
		return $api;
	}
}